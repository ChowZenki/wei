<?php
require_once dirname(__FILE__) . '/../../../libs/Qwin.php';
require_once dirname(__FILE__) . '/../../../libs/Qwin/Is.php';

/**
 * Test class for Qwin_Is.
 * Generated by PHPUnit on 2012-01-18 at 09:08:41.
 */
class Qwin_IsTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_Is
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Qwin::getInstance()->is;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_Is::__invoke
     * @covers Qwin_IsCallable::__invoke
     */
    public function test__invoke() {
        $widget = $this->object;

        $this->assertTrue($widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
        )), 'one rule');

        $this->assertFalse($widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                    'qq' => true,
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
        )), 'more rules');

        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'required' => false,
                ),
            ),
            'data' => array(

            ),
        ));

        $this->assertTrue($widget->is(array(
            'rules' => array(
                'name' => array(
                    'length' => array(5, 20),
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
        )), 'rule with params');

        $this->assertFalse($widget->is(array(
            'rules' => array(
                'email' => array(
                    'length' => array(5, 10),
                ),
            ),
            'data' => array(
                'email' => 'email@email.com'
            ),
            'break' => true,
        )), 'array options');

        // success event
        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
            'success' => array($this, 'validSuccess'),
        ));
        $this->assertEquals('success', $this->_validState, 'success event');

        // failure event
        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'length' => array(10),
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
            'failure' => array($this, 'validFailure')
        ));
        $this->assertEquals('failure', $this->_validState, 'failure event');

        // empty value test
        // note that widthout "required" rule, all empty value would pass valid
        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                    'required' => false,
                ),
            ),
            'success' => array($this, 'validSuccess'),
        ));
        $this->assertEquals('success', $this->_validState, 'empty value test');

        // validated event
        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
            'validated' => array($this, 'validated')
        ));

        // invalid event
        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'required' => true,
                    'length' => array(10),
                    'email' => true,
                )
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
            'invalidated' => array($this, 'invalid')
        ));

        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                ),
            ),
            'data' => array(
                'name' => 'email@email.com',
            ),
            'validatedOne' => array($this, 'validatedOne')
        ));
        //$this->assertEquals('validatedOne', $this->_validState);

        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                ),
            ),
            'data' => array(
                'name' => 'email.com',
            ),
            'invalidatedOne' => array($this, 'invalidatedOne')
        ));

        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                ),
            ),
            'data' => array(

            ),
            'breakOne' => true,
        ));

        // rule should not be empty
        $this->setExpectedException('Qwin_Exception', 'Rules should not be empty.');

        $is = new Qwin_Is;
        $is->__invoke(array());
    }

    /**
     * @convers Qwin_Is::getLastValidationResult
     */
    public function testGetLastValidationResult()
    {
        $widget = $this->object;

        $widget->is(array(
            'rules' => array(
                'name' => array(
                    'email' => true,
                ),
            ),
        ));

        $this->assertInstanceOf('Qwin_ValidationResult', $widget->getLastValidationResult());
    }

    protected $_validState;

    public function validSuccess()
    {
        $this->_validState = 'success';
    }

    public function validFailure()
    {
        $this->_validState = 'failure';
    }

    public function validated()
    {
        $this->assertTrue(true, 'called validated method');
    }

    public function requredRuleValidated()
    {
        $this->assertTrue(true, 'requred rule validated');
    }

    public function invalid()
    {
        $this->assertTrue(true, 'called invalid method');
    }

    public function validatedOne()
    {
        $this->_validState = __FUNCTION__;
    }

    public function invalidatedOne()
    {
        $this->_validState = __FUNCTION__;
    }
}
