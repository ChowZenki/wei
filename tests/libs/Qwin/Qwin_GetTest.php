<?php
require_once dirname(__FILE__) . '/../../../libs/Qwin.php';

/**
 * Test class for Qwin_Get.
 * Generated by PHPUnit on 2012-01-18 at 09:08:17.
 */
class Qwin_GetTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_Get
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers Qwin_Get::__construct
     */
    protected function setUp() {
        $this->object = Qwin::getInstance()->get;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_Get::call
     */
    public function testCall() {
        $name = $this->object->call('name');
        $source = isset($_GET['name']) ? $_GET['name'] : null;

        $this->assertEquals($name->source, $source);

        $default = 'default';
        $name2 = $this->object->call('name', $default);
        $source = isset($_GET['name']) ? $_GET['name'] : $default;

        $this->assertEquals($name2->source, $default);

        $name->source = 'this is a string';
        $name3 = $name->get(1);

        $this->assertEquals('h', $name3->source);

        $name4 = $name->get(0, 2);
        $this->assertEquals('thi', $name4->source);

        $name->source = array(
            'value1',
            'value2',
            'value3',
        );
        $name5 = $name->get(0, 1);
        $this->assertEquals(array('value1', 'value2'), $name5->source);


        $name6 = $name->get(array());
        $this->assertEquals($name, $name6);

        $name7 = $name->get(1, 'not int');

        $name8 = $name->get(new stdClass());
    }

    /**
     * @covers Qwin_Get::add
     */
    public function testAdd()
    {
        $widget = $this->object;

        $widget->add('key', 'value');

        $this->assertEquals('value', $widget->get('key')->source(), 'string param');

        $this->assertEquals('value', $widget->request('key')->source(), 'get from request widget');

        $widget->add(array(
            'key1' => 'value1',
            'key2' => 'value2',
        ));

        $this->assertEquals('value2', $widget->get('key2')->source(), 'array param');
    }

    /**
     * @covers Qwin_Get::remove
     */
    public function testRemove()
    {
        $widget = $this->object;

        $widget->add('remove', 'just a moment');

        $this->assertEquals('just a moment', $widget->get('remove')->source());

        $widget->remove('remove');

        $this->assertNull($widget->get('remove')->source());
    }
}