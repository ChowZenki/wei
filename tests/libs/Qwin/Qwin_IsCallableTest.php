<?php
require_once dirname(__FILE__) . '/../../../libs/Qwin.php';
require_once dirname(__FILE__) . '/../../../libs/Qwin/IsCallable.php';

/**
 * Test class for Qwin_IsCallable.
 * Generated by PHPUnit on 2012-02-03 at 01:42:25.
 */
class Qwin_IsCallableTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_IsCallable
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Qwin::getInstance()->isCallable;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_IsCallable::__invoke
     */
    public function test__invoke() {
        $widget = $this->object;

        $this->assertEquals(true, $widget->isCallable(array($this, 'callbackTest')), 'callback method test');

        $this->assertEquals(true, $widget->isCallable('isCallableTest'), 'function callback test');

        $this->assertEquals(true, $widget->isCallable(array(__CLASS__, 'callbackTest3')), 'static method callabck test');

        $this->assertEquals(false, $widget->isCallable('not callable'));

        $this->assertEquals(false, $widget->isCallable(array('not', 'callable')));

        $strFn = "function(){
            return 'callback4';
        }";
        $this->assertEquals(true, $widget->isCallable($strFn), 'string function callback test');

        $this->assertEquals(true, $widget->isCallable($strFn), 'call again for cache test');
    }

    /**
     * @covers Qwin_IsCallable::getStringFn
     */
    public function testGetStringFn() {
        $widget = $this->object;

        $strFn = "function(){
            return 'callback4';
        }";

        $widget->isCallable($strFn);

        $this->assertNotNull($widget->getStringFn($strFn));
    }

    public function callbackTest()
    {
        return 'callback1';
    }

    public static function callbackTest3()
    {
        return 'callback3';
    }

    public function callbackWithParams($params)
    {
        return $params;
    }
}

/**
 * Function for callback test
 *
 * @return string
 */
function isCallableTest()
{
    return 'callback2';
}
