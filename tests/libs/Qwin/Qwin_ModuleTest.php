<?php
require_once dirname(__FILE__) . '/../../../libs/Qwin.php';
require_once dirname(__FILE__) . '/../../../libs/Qwin/Module.php';

/**
 * Test class for Qwin_Module.
 * Generated by PHPUnit on 2012-01-18 at 09:09:33.
 */
class Qwin_ModuleTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_Module
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Qwin::getInstance()->module;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_Module::__construct
     * @covers Qwin_Module::__invoke
     *
     */
    public function test__invoke() {
        $widget = $this->object;

        $widget->request->add('module', 'test');

        // instance new module object rather than get from widget
        // because module widget may has been called
        // $widget->module()->toString()
        $module = new Qwin_Module;

        $this->assertEquals('test', $module->toString(), 'get module');

        $widget->request->remove('module');

        // instance a new module object with default value
        $module = new Qwin_Module(array(
            'default' => 'article',
        ));

        $this->assertEquals('article', $module->toString(), 'get default value as module');

        $module = $widget->module();

        $this->assertEquals('new module', $widget->module('new module'), 'set new module');

        $widget->request->add('m', 'me');
        $widget->request->add('module', 'not me');

        $module = new Qwin_Module(array(
            'key' => 'm',
        ));

        $this->assertEquals('me', $module->toString());
    }

    /**
     * @covers Qwin_Module::__toString
     */
    public function test__toString()
    {
        $widget = $this->object;

        $this->assertInternalType('string', $widget->__toString());
    }

    /**
     * @covers Qwin_Module::toString
     */
    public function testToString()
    {
        $widget = $this->object;

        $this->assertInternalType('string', $widget->toString());
    }
}
