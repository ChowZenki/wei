<?php

require_once dirname(__FILE__) . '/../../../libs/Qwin.php';
require_once dirname(__FILE__) . '/../../../libs/Qwin/IsExists.php';

/**
 * Test class for Qwin_IsExists.
 * Generated by PHPUnit on 2012-01-18 at 09:09:31.
 */
class Qwin_IsExistsTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_IsExists
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Qwin_IsExists;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_IsExists::call
     * @covers Qwin_IsExists::__construct
     */
    public function testCall() {
        $object = $this->object;

        $this->assertEquals(false, $object->isExists(), 'Not File path');

        $object->source = __FILE__;

        $this->assertEquals($object->isExists(), __FILE__, 'File found');

        $object->source = '.file not found';

        $this->assertFalse($object->isExists(), 'File not found');

        $paths = explode(PATH_SEPARATOR, ini_get('include_path'));
        $path = array_pop($paths);
        $files = scandir($path);
        foreach ($files as $file) {
            if ('.' == $file || '..' == $file) {
                continue;
            }
            if (file_exists($path . DIRECTORY_SEPARATOR . $file)) {
                $object->source = $file;
                $this->assertNotEquals(false, $object->isExists(), 'File in include path found');
                break;
            }
        }

        if (!function_exists('stream_resolve_include_path')) {
            function stream_resolve_include_path($param) {
                if ('.file not found' == $param) {
                    return false;
                } else {
                    return 'file found.';
                }
            }

            $this->assertNotEquals(false, $object->isExists(), 'File in include path found');

            $object->source = '.file not found';

            $this->assertFalse($object->isExists(), 'File in include path found');
        }
    }
}

?>
