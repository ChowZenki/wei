<?php
require_once dirname(__FILE__) . '/../../../libs/Qwin.php';
require_once dirname(__FILE__) . '/../../../libs/Qwin/ValidationResult.php';

/**
 * Test class for Qwin_ValidationResult.
 * Generated by PHPUnit on 2012-02-03 at 06:00:36.
 */
class Qwin_ValidationResultTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_ValidationResult
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Qwin_ValidationResult;


    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_ValidationResult::call
     */
    public function testCall() {
        $widget = $this->object;

        $this->assertInstanceOf('Qwin_ValidationResult', $widget->call());
    }

    /**
     * @covers Qwin_ValidationResult::getInvalidRules
     * @covers Qwin_ValidationResult::addInvalidRule
     * @covers Qwin_ValidationResult::removeInvalidRule
     * @covers Qwin_ValidationResult::removeValidateRule
     */
    public function testGetInvalidRules() {
        $widget = $this->object;

        $widget->addInvalidRule('email');

        $this->assertContains('email', $widget->getInvalidRules());

        $widget->removeInvalidRule('email');

        $this->assertNotContains('email', $widget->getInvalidRules());
    }

    /**
     * @covers Qwin_ValidationResult::getValidatedRules
     * @covers Qwin_ValidationResult::addValidatedRule
     * @covers Qwin_ValidationResult::removeValidateRule
     */
    public function testGetValidatedRules() {
        $widget = $this->object;

        $widget->addValidatedRule('alnum');

        $this->assertContains('alnum', $widget->getValidatedRules());

        $widget->removeValidateRule('alnum');

        $this->assertNotContains('alnum', $widget->getValidatedRules());
    }

    /**
     * @covers Qwin_ValidationResult::isInvalid
     */
    public function testIsInvalid() {
        $widget = $this->object;

        $widget->addInvalidRule('email');

        $this->assertTrue($widget->isInvalid('email'));

        $widget->removeInvalidRule('email');

        $this->assertFalse($widget->isInvalid('email'));
    }

    /**
     * @covers Qwin_ValidationResult::isValidated
     */
    public function testIsValidated() {
        $widget = $this->object;

        $widget->addValidatedRule('email');

        $this->assertTrue($widget->isValidated('email'));

        $widget->removeValidateRule('email');

        $this->assertFalse($widget->isValidated('email'));
    }
}