<?php
require_once dirname(__FILE__) . '/../../../libs/Qwin.php';
require_once dirname(__FILE__) . '/../../../libs/Qwin/Action.php';

/**
 * Test class for Qwin_Action.
 * Generated by PHPUnit on 2012-02-06 at 07:40:02.
 */
class Qwin_ActionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Qwin_Action
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Qwin::getInstance()->action;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Qwin_Action::__construct
     * @covers Qwin_Action::__invoke
     *
     */
    public function test__invoke() {
        $widget = $this->object;

        $widget->request->set('action', 'test');

        $action = new Qwin_Action;

        $this->assertEquals('test', $action->toString(), 'get action');

        $widget->request->remove('action');

        // instance a new action object with default value
        $action = new Qwin_Action(array(
            'default' => 'article',
        ));

        $this->assertEquals('article', $action->toString(), 'get default value as action');

        $action = $widget->action();

        $this->assertEquals('new action', $widget->action('new action'), 'set new action');

        $widget->request->set('a', 'me');
        $widget->request->set('action', 'not me');

        $action = new Qwin_Action(array(
            'key' => 'a',
        ));

        $this->assertEquals('me', $action->toString());
    }

    /**
     * @covers Qwin_Action::__toString
     */
    public function test__toString()
    {
        $widget = $this->object;

        $this->assertInternalType('string', $widget->__toString());
    }

    /**
     * @covers Qwin_Action::toString
     */
    public function testToString()
    {
        $widget = $this->object;

        $this->assertInternalType('string', $widget->toString());
    }
}
